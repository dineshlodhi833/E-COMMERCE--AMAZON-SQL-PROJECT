
# CREATE DATEBASE,TABLES AND IMPORT DATA INTO THE TABLES

# CREATE DATABASE AMAZON_SQL.

use amazon_sql;

# CREATE TABLES AND IMPORT DATA INTO THE TABLES.

# CREATE TABLE CATEGORY.
create table category
(category_id int primary key,
category_name varchar(20));

# CREATE TABLE CUSTOMERS.
create table customers
(customer_id int primary key,
first_name varchar(20),
last_name varchar(20),
state varchar(20));

# CREATE TABLE SELLERS.
create table sellers
(seller_id int primary key,
seller_name varchar(25),
origin varchar(10));

# CREATE TABLE PRODUCTS.
create table products
(product_id int primary key,
product_name varchar(35),
price float,
cogs float,
category_id int,
constraint product_fk_category foreign key (category_id)
references category(category_id));

# CREATE TABLE ORDERS.
create table orders
(order_id int primary key,
order_date date,	
customer_id int, -- fk
seller_id int, -- fk
order_status varchar(15),
constraint orders_fk_customers foreign key (customer_id)
references customers(customer_id),
constraint orders_fk_sellers foreign key(seller_id)
references sellers(seller_id));

# CREATE TABLE ORDER_ITEMS.
create table order_items
(order_item_id int primary key,
order_id int, -- fk
product_id int, -- fk
quantity int,
price_per_unit float,
constraint order_items_fk_orders foreign key(order_id)
references orders(order_id),
constraint order_items_fk_products foreign key(product_id)
references products(product_id));

# CREATE TABLE PAYMENTS.
create table payments
(payment_id int primary key,
order_id int,-- fk
payment_date date,
payment_status varchar(20),
constraint payment_fk_orders foreign key(order_id) references orders(order_id));

# CREATE TABLE SHIPPING.
create table shipping
(shipping_id int primary key,
order_id int, -- fk
shipping_date date,
return_date date,
shipping_providers varchar(15),
shipping_status varchar(20),
constraint shippings_fk_orders foreign key(order_id)
references orders(order_id));

# CREATE TABLE INVENTORY.
create table inventory
(inventory_id int primary key,
product_id int, -- fk
stock int,
warehouse_id int,
last_stock_date date,
constraint inventory_fk_products foreign key(product_id) 
references products(product_id));
 
-- BUSINESS PROBLEM 
 
 -- 1.TOP SELLING PRODUCTS
 -- Query the top 10 products by total sales value.
 -- challenege: include product name,total quantity sold,total sales value.
 
-- creating new column.
alter table order_items add column total_sales float;

set sql_safe_updates=0;

-- update order_items
update order_items set total_sales=quantity*price_per_unit;

SELECT 
    oi.product_id,
    p.product_name,
    SUM(oi.total_sales) AS total_sales,
    COUNT(o.order_id) AS total_orders
FROM
    orders AS o
        JOIN
    order_items AS oi ON oi.order_id = o.order_id
        JOIN
    products AS p ON p.product_id = oi.product_id
GROUP BY oi.product_id , p.product_name
ORDER BY total_sales DESC
LIMIT 10;

 
-- 2Q- Revenue by Category
-- Calculate total revenue generated by each product category.
-- Challenge: Include the percentage contribution of each category to total revenue.
 
SELECT 
    p.category_id,
    c.category_name,
    SUM(oi.total_sales) AS total_sales,
    SUM(oi.total_sales) / (SELECT 
            SUM(total_sales)
        FROM
            order_items) * 100 AS contribution
FROM
    order_items AS oi
        JOIN
    products AS p ON p.product_id = oi.product_id
        LEFT JOIN
    category AS c ON c.category_id = p.category_id
GROUP BY 1 , 2
ORDER BY 3 DESC; 
 
 
-- Q3-Average Order Value (AOV)
-- Compute the average order value for each customer.
-- Challenge: Include only customers with more than 5 orders.
 
 SELECT 
    c.customer_id,
    CONCAT(c.first_name, ' ', c.last_name) AS full_name,
    SUM(total_sales) / COUNT(o.order_id) AS AOV,
    COUNT(o.order_id) AS total_orders
FROM
    orders AS o
        JOIN
    customers AS c ON c.customer_id = o.customer_id
        JOIN
    order_items AS oi ON oi.order_id = o.order_id
GROUP BY 1 , 2
HAVING COUNT(o.order_id) > 5;
 

-- Q4- Customers with No Purchases
-- Find customers who have registered but never placed an order. 

SELECT *
FROM customers as c
LEFT JOIN
orders as o
ON o.customer_id = c.customer_id
WHERE o.customer_id IS NULL;

 
-- Q5- Least-Selling Categories by State
-- Identify the least-selling product category for each state. 
 
SELECT 
	c.state,
	cat.category_name,
	SUM(oi.total_sales) as total_sales,
	RANK() OVER(PARTITION BY c.state ORDER BY SUM(oi.total_sales) ASC) as ranks
FROM orders as o
JOIN 
customers as c
ON o.customer_id = c.customer_id
JOIN
order_items as oi
ON o.order_id = oi. order_id
JOIN 
products as p
ON oi.product_id = p.product_id
JOIN
category as cat
ON cat.category_id = p.category_id
GROUP BY c.state, cat.category_name;
 
 
-- Q6- Customer Lifetime Value (CLTV)
-- Calculate the total value of orders placed by each customer over their lifetime.
-- Challenge: Rank customers based on their CLTV.

 SELECT 
	c.customer_id,
	CONCAT(c.first_name, ' ',  c.last_name) as full_name,
	SUM(total_sales) as CLTV,
	DENSE_RANK() OVER( ORDER BY SUM(total_sales) DESC) as cx_ranking
FROM orders as o
JOIN 
customers as c
ON c.customer_id = o.customer_id
JOIN 
order_items as oi
ON oi.order_id = o.order_id
GROUP BY c.customer_id,full_name;
 
 
-- Q7- Inventory Stock Alerts
-- Query products with stock levels below a certain threshold (e.g., less than 10 units).
-- Challenge: Include last restock date and warehouse information
 
SELECT 
	i.inventory_id,
	p.product_name,
	i.stock as current_stock_left,
	i.last_stock_date,
	i.warehouse_id
FROM inventory as i
join 
products as p
ON p.product_id = i.product_id
WHERE stock < 10;


-- Q8- Shipping Delays
-- Identify orders where the shipping date is later than 3 days after the order date.
-- Challenge: Include customer, order details, and delivery provider.
 
SELECT 
	c.*,
	o.*,
	s.shipping_providers,
s.shipping_date - o.order_date as days_took_to_ship
FROM orders as o
JOIN
customers as c
ON c.customer_id = o.customer_id
JOIN 
shipping as s
ON o.order_id = s.order_id
WHERE s.shipping_date - o.order_date > 3; 


-- Q9- Payment Success Rate 
-- Calculate the percentage of successful payments across all orders.
-- Challenge: Include breakdowns by payment status (e.g., failed, pending).

SELECT 
	p.payment_status,
	COUNT(*) as total_cnt,
	COUNT(*) / (SELECT COUNT(*) FROM payments) * 100 as numbers
FROM orders as o
JOIN
payments as p
ON o.order_id = p.order_id
GROUP BY p.payment_status;


-- Q10-Top Performing Sellers
-- Find the top 5 sellers based on total sales value.
-- Challenge: Include both successful and failed orders, 
-- and display their percentage of successful orders.

SELECT 
	s.seller_id,
	s.seller_name,
	SUM(oi.total_sales) as total_sales
FROM orders as o
JOIN
sellers as s
ON o.seller_id = s.seller_id
JOIN 
order_items as oi
ON oi.order_id = o.order_id
GROUP BY 1, 2
ORDER BY 3 DESC
LIMIT 5;


-- Q11- Product Profit Margin
-- Calculate the profit margin for each product (difference between price and cost of goods sold).
-- Challenge: Rank products by their profit margin, showing highest to lowest.

SELECT 
	product_id,
	product_name,
	profit_margin,
	DENSE_RANK() OVER( ORDER BY profit_margin DESC) as product_ranking
FROM
(SELECT 
	p.product_id,
	p.product_name,
	-- SUM(total_sale - (p.cogs * oi.quantity)) as profit,
	SUM(total_sales - (p.cogs * oi.quantity))/sum(total_sales) * 100 as profit_margin
FROM order_items as oi
JOIN 
products as p
ON oi.product_id = p.product_id
GROUP BY 1, 2
) as t1;


-- Q12-Most Returned Products
-- Query the top 10 products by the number of returns.
-- Challenge: Display the return rate as a percentage of total units sold for each product.
 
SELECT 
	p.product_id,
	p.product_name,
	COUNT(*) as total_unit_sold,
	SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END) as total_returned,
	SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END)/COUNT(*) * 100 as return_percentage
FROM order_items as oi
JOIN 
products as p
ON oi.product_id = p.product_id
JOIN orders as o
ON o.order_id = oi.order_id
GROUP BY 1, 2
ORDER BY 5 DESC;

 
-- Q13- IDENTITY customers into returning or new
-- if the customer has done more than 5 return categorize them as returning otherwise new
-- Challenge: List customers id, name, total orders, total returns

SELECT 
c_full_name as customers,
total_orders,
total_return,
CASE
	WHEN total_return > 5 THEN 'Returning_customers' ELSE 'New'
END as cx_category
FROM
(SELECT 
	CONCAT(c.first_name, ' ', c.last_name) as c_full_name,
	COUNT(o.order_id) as total_orders,
	SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END) as total_return	
FROM orders as o
JOIN 
customers as c
ON c.customer_id = o.customer_id
JOIN
order_items as oi
ON oi.order_id = o.order_id
GROUP BY 1
) as t1;

 
-- Q14- Top 5 Customers by Orders in Each State
-- Identify the top 5 customers with the highest number of orders for each state.
-- Challenge: Include the number of orders and total sales for each customer. 
 
 SELECT * FROM 
(SELECT 
	c.state,
	CONCAT(c.first_name, ' ', c.last_name) as customers,
	COUNT(o.order_id) as total_orders,
	SUM(total_sales) as total_sales,
	DENSE_RANK() OVER(PARTITION BY c.state ORDER BY COUNT(o.order_id) DESC) as ranks
FROM orders as o
JOIN 
order_items as oi
ON oi.order_id = o.order_id
JOIN 
customers as c
ON 
c.customer_id = o.customer_id
GROUP BY 1, 2
) as t1
WHERE ranks <=5;

 
-- Q15- Revenue by Shipping Provider
-- Calculate the total revenue handled by each shipping provider.
-- Challenge: Include the total number of orders handled and the average delivery time for each provider.
 
 SELECT 
	s.shipping_providers,
	COUNT(o.order_id) as order_handled,
	SUM(oi.total_sales) as total_sales,
	COALESCE(AVG(s.return_date - s.shipping_date), 0) as average_days
FROM orders as o
JOIN 
order_items as oi
ON oi.order_id = o.order_id
JOIN 
shipping as s
ON 
s.order_id = o.order_id
GROUP BY 1;


-- Q16- Top 10 product with highest decreasing revenue ratio compare to last year(2022) and current_year(2023)
-- Challenge: Return product_id, product_name, category_name, 2022 revenue and 2023 revenue decrease ratio at 
-- end Round the result
 
 WITH last_year_sale
as
(
SELECT 
	p.product_id,
	p.product_name,
	SUM(oi.total_sales) as revenue
FROM orders as o
JOIN 
order_items as oi
ON oi.order_id = o.order_id
JOIN 
products as p
ON 
p.product_id = oi.product_id
WHERE EXTRACT(YEAR FROM o.order_date) = 2022
GROUP BY 1, 2
),
current_year_sale
AS
(
SELECT 
	p.product_id,
	p.product_name,
	SUM(oi.total_sales) as revenue
FROM orders as o
JOIN 
order_items as oi
ON oi.order_id = o.order_id
JOIN 
products as p
ON 
p.product_id = oi.product_id
WHERE EXTRACT(YEAR FROM o.order_date) = 2023
GROUP BY 1, 2
)
SELECT
	cs.product_id,
	ls.revenue as last_year_revenue,
	cs.revenue as current_year_revenue,
	ls.revenue - cs.revenue as rev_diff,
	ROUND((cs.revenue - ls.revenue)/ls.revenue * 100, 2) as reveneue_dec_ratio
FROM last_year_sale as ls
JOIN
current_year_sale as cs
ON ls.product_id = cs.product_id
WHERE 
	ls.revenue > cs.revenue
ORDER BY 5 DESC
LIMIT 10;

 
 
 
 
 